 --nvim-ufo, folding client
--vim.o.foldcolumn = '0' -- '0' is not bad
--vim.o.foldlevel = 99   -- Using ufo provider need a large value, feel free to decrease the value
--vim.o.foldlevelstart = 99
--vim.o.foldenable = true

--vim.keymap.set('n', 'zR', require('ufo').openAllFolds)
--vim.keymap.set('n', 'zM', require('ufo').closeAllFolds)
--require('ufo').setup()

--local lsp = require("lsp-zero")

--lsp.set_preferences({
	--suggest_lsp_servers = true,
	--setup_servers_on_start = true,
	--set_lsp_keymaps = true,
	--configure_diagnostics = true,
	--cmp_capabilities = true,
	--manage_nvim_cmp = true,
	--call_servers = "local",
	--sign_icons = {
		--error = "✘",
		--warn = "▲",
		--hint = "⚑",
		--info = "",
	--},
--})

--require('mason').setup({})
--require('mason-lspconfig').setup({
	--handlers = {
		--lsp.default_setup,
	--},
	--ensure_installed = {
		--"astro",
		--"bashls",
		--"cssls",
		--"emmet_ls",
		--"html",
		--"rust_analyzer",
		--"svelte",
		--"tailwindcss",
		--"tsserver",
		--"vimls",
		--"yamlls",
		--"jsonls",
		--"lua_ls"
	--}
--})

 --Fix Undefined global 'vim'
--lsp.configure("lua_ls", {
	--settings = {
		--Lua = {
			--diagnostics = {
				--globals = { "vim" },
			--},
		--},
	--},
--})

--lsp.configure("tsserver", {
	--init_options = {
		--preferences = {
			--disableSuggestions = true,
		--},
	--},
--})

--lsp.configure("yamlls", {
	--settings = {
		--yaml = {
			--customTags = {
				--"!Equals sequence",
				--"!FindInMap sequence",
				--"!GetAtt",
				--"!GetAZs",
				--"!ImportValue",
				--"!Join sequence",
				--"!Ref",
				--"!Select sequence",
				--"!Split sequence",
				--"!Sub",
				--"!If sequence",
				--"!Not sequence",
				--"!Or sequence",
			--},
		--},
	--},
--})

--lsp.configure("jsonls", {
	--settings = {
		--json = {
			--schemas = {
				--{
					--fileMatch = { "package.json" },
					--url = "https://json.schemastore.org/package.json",
				--},
				--{
					--fileMatch = { "jsconfig*.json" },
					--url = "https://json.schemastore.org/jsconfig.json",
				--},
				--{
					--fileMatch = { "tsconfig*.json" },
					--url = "https://json.schemastore.org/tsconfig.json",
				--},
				--{
					--fileMatch = {
						--".prettierrc",
						--".prettierrc.json",
						--"prettier.config.json",
					--},
					--url = "https://json.schemastore.org/prettierrc.json",
				--},
				--{
					--fileMatch = { ".eslintrc", ".eslintrc.json" },
					--url = "https://json.schemastore.org/eslintrc.json",
				--},
				--{
					--fileMatch = { ".babelrc", ".babelrc.json", "babel.config.json" },
					--url = "https://json.schemastore.org/babelrc.json",
				--},
				--{
					--fileMatch = { "lerna.json" },
					--url = "https://json.schemastore.org/lerna.json",
				--},
				--{
					--fileMatch = { "now.json", "vercel.json" },
					--url = "https://json.schemastore.org/now.json",
				--},
				--{
					--fileMatch = {
						--".stylelintrc",
						--".stylelintrc.json",
						--"stylelint.config.json",
					--},
					--url = "http://json.schemastore.org/stylelintrc.json",
				--},
			--},
		--},
	--},
--})

--local cmp = require("cmp")
--local cmp_mappings = lsp.defaults.cmp_mappings({
--["<CR>"] = cmp.mapping.confirm({ select = false }),
--["<C-y>"] = cmp.mapping.confirm({ select = true }),
--["<C-Space>"] = cmp.mapping.complete(),
--})

--cmp.setup({
	--mapping = {
		--["<CR>"] = cmp.mapping.confirm({ select = false }),
		--["<C-y>"] = cmp.mapping.confirm({ select = true }),
		--["<C-Space>"] = cmp.mapping.complete(),
	--},
	--sources = {
		--{ name = "path" },
		--{ name = "nvim_lsp", keyword_length = 0 },
		--{ name = "buffer",   keyword_length = 3 },
		--{ name = "luasnip",  keyword_length = 1 },
	--},
--})

--lsp.on_attach(function(client, bufnr)
	 --Mappings.
	 --See `:help vim.lsp.*` for documentation on any of the below functions
	--local bufopts = { noremap = true, silent = true, buffer = bufnr }

	--if client.name == "eslint" then
		--vim.cmd.LspStop("eslint")
		--return
	--end

	 --Enable completion triggered by <c-x><c-o>
	--vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

	--vim.keymap.set("n", "gD", vim.lsp.buf.declaration, bufopts)
	--vim.keymap.set("n", "gd", vim.lsp.buf.definition, bufopts)
	--vim.keymap.set("n", "[d", vim.diagnostic.goto_next, bufopts)
	--vim.keymap.set("n", "]d", vim.diagnostic.goto_prev, bufopts)
	--vim.keymap.set("n", "K", vim.lsp.buf.hover, bufopts)
	--vim.keymap.set("n", "gi", vim.lsp.buf.implementation, bufopts)
	--vim.keymap.set("n", "<leader>i", vim.lsp.buf.signature_help, bufopts)
	--vim.keymap.set("n", "<leader>wa", vim.lsp.buf.add_workspace_folder, bufopts)
	--vim.keymap.set("n", "<leader>wr", vim.lsp.buf.remove_workspace_folder, bufopts)
	--vim.keymap.set("n", "<leader>wl", function()
		--print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
	--end, bufopts)
	--vim.keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, bufopts)
	--vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, bufopts)
	--vim.keymap.set("n", "<leader>rr", vim.lsp.buf.references, bufopts)
	--vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, bufopts)
	--vim.keymap.set("n", "gr", vim.lsp.buf.references, bufopts)
	--vim.keymap.set("n", "<leader>f", function()
		--vim.lsp.buf.format({ bufnr = vim.api.nvim_get_current_buf() })
	--end, { buffer = bufnr, desc = "[lsp] format" })
--end)

--lsp.set_server_config({
	--capabilities = {
		--textDocument = {
			--foldingRange = {
				--dynamicRegistration = false,
				--lineFoldingOnly = true
			--}
		--}
	--}
--})

--lsp.setup()

--vim.diagnostic.config({
	--virtual_text = true,
--})

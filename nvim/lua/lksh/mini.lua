-- Packages I have that can (maybe) be replaced by mini.nvim
--
-- lazy
--    mini.deps
--
-- nvim-cmp
--    mini.completion
--
-- snippet stuff
--    mini.snippets
--
-- [x]lualine
--    mini.statusline
--
-- telescope
--    mini.fuzy
--
-- diffview.nvim
-- gitsigns.nvim
--    mini.diff (maybe mini.git too)
--
-- [x]nvim-autopairs
--    mini.pairs
--
-- [x]nvim-surround
--    mini.surround
--
-- [x]indent-blankline
--    mini.indentscope
--
-- [x]nvim-web-devicons
--    mini.icons
--
-- [x]neo-tree
--    mini.files
--
-- vim-illuminate
--    mini.cursorword
--
-- nvim-highlight-colors
--

-- Clone 'mini.nvim' manually in a way that it gets managed by 'mini.deps'
-- local path_package = vim.fn.stdpath("data") .. "/site/"
-- local mini_path = path_package .. "pack/deps/start/mini.nvim"
-- if not vim.loop.fs_stat(mini_path) then
-- 	vim.cmd('echo "Installing `mini.nvim`" | redraw')
-- 	local clone_cmd = {
-- 		"git",
-- 		"clone",
-- 		"--filter=blob:none",
-- 		"https://github.com/echasnovski/mini.nvim",
-- 		mini_path,
-- 	}
-- 	vim.fn.system(clone_cmd)
-- 	vim.cmd("packadd mini.nvim | helptags ALL")
-- 	vim.cmd('echo "Installed `mini.nvim`" | redraw')
-- end
--
-- -- Set up 'mini.deps' (customize to your liking)
-- require("mini.deps").setup({ path = { package = path_package } })
--
-- --
--
-- local add, now, later = MiniDeps.add, MiniDeps.now, MiniDeps.later
--
-- now(function()
-- 	add({
-- 		source = "rose-pine/neovim",
-- 		name = "rose-pine",
-- 	})
--
-- 	vim.cmd("color rose-pine-main")
-- end)
--
-- --
--
-- later(function()
-- 	add({
--     -- Formatter management
-- 		source = "stevearc/conform.nvim",
-- 	})
--
--
-- end)
--
--
-- vim.cmd("colorscheme randomhue")

-- require("mini.files").setup({ })
-- vim.keymap.set("n", "<leader>e", MiniFiles.open, {})

-- local starter = require("mini.starter")
-- starter.setup({
-- 	items = {
-- 		{ name = "FE : Explore Files", action = MiniFiles.open, section = "Files" },
-- 		starter.sections.recent_files(10, true),
-- 		starter.sections.pick(),
-- 	},
-- })

-- require("mini.icons").setup()
-- require("mini.statusline").setup()
-- require("mini.pairs").setup()
-- require("mini.surround").setup()
-- require("mini.cursorword").setup()
-- require("mini.completion").setup()
-- require("mini.snippets").setup()

-- require("mini.pick").setup()

-- vim.keymap.set("n", "ff", ":Pick files<cr>", {})
-- vim.keymap.set("n", "fg", ":Pick grep_live<cr>", {})
-- vim.keymap.set("n", "fh", ":Pick help<cr>", {})
-- vim.keymap.set("n", "fb", ":Pick buffers<cr>", {})

-- require("mini.diff").setup({
-- 	view = {
-- 		signs = { add = "┃", change = "┃", delete = "┃" },
-- 	},
-- })

-- local indentscope = require("mini.indentscope")
-- indentscope.setup({
-- 	draw = {
-- 		animation = indentscope.gen_animation.none(),
-- 	},
-- })

-- local hi = require("mini.hipatterns")
-- hi.setup({
-- 	highlighters = {
-- 		fixme = { pattern = "%f[%w]()FIXME()%f[%W]", group = "MiniHipatternsFixme" },
-- 		hack = { pattern = "%f[%w]()HACK()%f[%W]", group = "MiniHipatternsHack" },
-- 		todo = { pattern = "%f[%w]()TODO()%f[%W]", group = "MiniHipatternsTodo" },
-- 		note = { pattern = "%f[%w]()NOTE()%f[%W]", group = "MiniHipatternsNote" },
--
-- 		hex_color = hi.gen_highlighter.hex_color(),
-- 	},
-- })
